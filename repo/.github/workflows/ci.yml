name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          tests/package-lock.json

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'

    - name: Install dependencies
      run: |
        cd tests && npm ci
        cd ../frontend && npm ci

    - name: Build and start services
      run: |
        docker compose up --build -d
        sleep 30

    - name: Wait for services to be healthy
      run: |
        timeout 60 bash -c 'until docker compose ps --filter health=healthy | grep -q "api.*healthy"; do echo "Waiting for API to be healthy..."; sleep 5; done'
        timeout 60 bash -c 'until docker compose ps --filter health=healthy | grep -q "web.*healthy"; do echo "Waiting for Web to be healthy..."; sleep 5; done'

    - name: Run smoke tests
      run: |
        cd tests
        node smoke.js

    - name: Build frontend for E2E
      run: |
        cd frontend
        npm run build

    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install chromium

    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker images
      run: |
        docker build -t todo-api ./backend
        docker build -t todo-web ./frontend

    - name: Test Docker images
      run: |
        docker run --rm todo-api dotnet --version
        echo "Docker images built successfully"